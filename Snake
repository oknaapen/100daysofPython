#main

from turtle import Turtle as T
from turtle import Screen
import time
from food import Food
from Snake import *
from Scoreboard import Score

snake = Snake()
screen = Screen()
food = Food()
score = Score()
screen.setup(600, 600)
screen.bgcolor("black")
screen.title("Slangen")



screen.onkey(snake.up, "Up")
screen.onkey(snake.down, "Down")
screen.onkey(snake.left, "Left")
screen.onkey(snake.right, "Right")

game_is_on = True



while game_is_on:
    screen.update()
    time.sleep(0.2)
    screen.listen()
    snake.move()




    if snake.head.distance(food) < 15:
        food.refresh()
        snake.extend()
        score.increase_Score()

    if snake.head.xcor() > 280 or snake.head.xcor() < -200 or snake.head.ycor() > 200 or snake.head.ycor() < -200:
        game_is_on == False
        score.game_over()

    for segment in snake.segments:
        if segment == snake.head:
            pass
        elif snake.head.distance(segment) < 10:
            score.game_over()




screen.exitonclick()

for seg_num in range(len(segments) - 1, 0, -1):
    new_x = segments[seg_num - 1].xcor()
    new_y = segments[seg_num - 1].ycor()
    segments[seg_num].goto(new_x, new_y)
segments[0].forward(20)


#Snake

from turtle import Turtle as T
starting_positions = [(0,0), (-12,0),(-40,0)]
MOVE_DISTANCE = 28
UP = 90
DOWN = 270
LEFT = 180
RIGHT = 0
points = 0


class Snake:
    def __init__(self):
        self.segments = []
        self.create_snake()
        self.head = self.segments[0]

    def create_snake(self):
        for position in starting_positions:
            new_segment = T("square")
            new_segment.color("white")
            new_segment.penup()
            new_segment.goto(position)
            self.segments.append(new_segment)

    def add_segment(self, position):
        new_segment = T("square")
        new_segment.color("white")
        new_segment.penup()
        new_segment.goto(position)
        self.segments.append(new_segment)

    def extend(self):
        self.add_segment(self.segments[-1].position())



    def up(self):
        if self.head.heading() != DOWN:
            self.head.setheading(UP)

    def down(self):
        if self.head.heading() != UP:
            self.head.setheading(DOWN)

    def left(self):
        if self.head.heading() != RIGHT:
            self.head.setheading(LEFT)

    def right(self):
        if self.head.heading() != LEFT:
            self.head.setheading(RIGHT)

    def move(self):
        for seg_num in range(len(self.segments) - 1, 0, -1):
            new_x = self.segments[seg_num - 1].xcor()
            new_y = self.segments[seg_num - 1].ycor()
            self.segments[seg_num].goto(new_x, new_y)
        self.segments[0].forward(20)

#coreboard

from turtle import Turtle as T
ALIGMENT = "center"
FONT = ("arial", 8, "normal")



class Score(T):
    def __init__(self):
        super().__init__()
        self.score = 0
        self.color("white")
        self.penup()
        self.goto(0, 270)
        self.hideturtle()
        self.update_scoreboard()

    def update_scoreboard(self):
        self.write(f"Score: {self.score}",align = ALIGMENT, font = FONT)

    def increase_Score(self):
        self.score += 1
        self.clear()
        self.update_scoreboard()

    def game_over(self):
        self.goto(0,0)
        self.write("Game Over", align = ALIGMENT, font = FONT)

#Food

import random
from turtle import Turtle


class Food(Turtle):
    def __init__(self):
        super().__init__()
        self.shape("circle")
        self.penup()
        self.shapesize(stretch_len=0.5, stretch_wid=0.5)
        self.color("blue")
        self.speed("fastest")
        self.refresh()


    def refresh(self):
        random_x = random.randint(-280, 280)
        random_y = random.randint(-280, 280)
        self.goto(random_x, random_y)



